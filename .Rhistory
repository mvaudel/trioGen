height = 400,
width = 300
)
plot(betaPlot)
dummy <- dev.off()
cmfBetaDF <- data.frame(
x = factor(c("h2", "h1", "h3", "h4", "h1", "h3", "h1"), levels = c("h2", "h1", "h3", "h4")),
y = c(2, 2, 1, 1, 3, 3, 1),
fill = factor(c("m", "m", "f", "f", "c", "c", "mt"), levels = c("c", "m", "f", "mt")),
stringsAsFactors = F
)
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
name = "β per parental allele",
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
name = "β [cmf]",
values = cmfColors
) +
theme(
axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank()
)
png(
filename = "docs/illustrations/cmf_beta_mt.png",
height = 400,
width = 300
)
plot(betaPlot)
dummy <- dev.off()
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2)]
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank(),
plot.background = element_blank()
)
png(
filename = "docs/illustrations/cmf_beta.png",
height = 400,
width = 300
)
plot(betaPlot)
dummy <- dev.off()
cmfBetaDF <- data.frame(
x = factor(c("h2", "h1", "h3", "h4", "h1", "h3"), levels = c("h2", "h1", "h3", "h4")),
y = c(2, 2, 1, 1, 3, 3),
fill = factor(c("m", "m", "f", "f", "c", "c"), levels = c("c", "m", "f")),
stringsAsFactors = F
)
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2)]
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank(),
plot.background = element_blank()
)
png(
filename = "docs/illustrations/cmf_beta.png",
height = 400,
width = 300
)
plot(betaPlot)
dummy <- dev.off()
png(
filename = "docs/illustrations/cmf_beta.png",
height = 400,
width = 300,
bg = NA
)
plot(betaPlot)
dummy <- dev.off()
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2, 4)],
breaks = c(1, 4, 2, 3)
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank()
)
cmfBetaDF <- data.frame(
x = factor(c("h2", "h1", "h3", "h4", "h1", "h3", "h1"), levels = c("h2", "h1", "h3", "h4")),
y = c(2, 2, 1, 1, 3, 3, 1),
fill = factor(c("m", "m", "f", "f", "c", "c", "mt"), levels = c("c", "m", "f", "mt")),
stringsAsFactors = F
)
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2, 4)],
breaks = c(1, 4, 2, 3)
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank()
)
plot(betaPlot)
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2, 4)],
breaks = c(1, 4, 2, 3)
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank()
)
plot(betaPlot)
betaPlot <- ggplot() +
geom_col(
data = cmfBetaDF,
mapping = aes(
x = x,
y = y,
fill = fill
)
) +
geom_col(
data = hBetaDF,
mapping = aes(
x = x,
y = y
),
fill = NA,
col = "black",
size = 1
) +
scale_y_continuous(
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_fill_manual(
values = cmfColors[c(1, 3, 2, 4)],
breaks = c("c", "mt", "m", "f")
) +
theme(
axis.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.title = element_blank()
)
plot(betaPlot)
source('C:/Github/trioGen/illustration.R', encoding = 'UTF-8')
install.packages(ggExtra)
install.packages("ggExtra")
library(ggplot2)
# basic usage
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggMarginal(p)
library(ggMarginal)
library(ggExtra)
ggMarginal(p)
# using some parameters
set.seed(30)
df <- data.frame(x = rnorm(500, 50, 10), y = runif(500, 0, 50))
p2 <- ggplot(df, aes(x, y)) + geom_point()
ggMarginal(p2)
ggMarginal(p2, type = "histogram")
ggMarginal(p2, margins = "x")
ggMarginal(p2, size = 2)
ggMarginal(p2, colour = "red")
ggMarginal(p2, colour = "red", xparams = list(colour = "blue", size = 3))
ggMarginal(p2, type = "histogram", bins = 10)
# Using violin plot
ggMarginal(p2, type = "violin")
# Using a "densigram" plot
ggMarginal(p2, type = "densigram")
# specifying the data directly instead of providing a plot
ggMarginal(data = df, x = "x", y = "y")
# more examples showing how the marginal plots are properly aligned even when
# the main plot axis/margins/size/etc are changed
set.seed(30)
df2 <- data.frame(x = c(rnorm(250, 50, 10), rnorm(250, 100, 10)),
y = runif(500, 0, 50))
p2 <- ggplot(df2, aes(x, y)) + geom_point()
ggMarginal(p2)
p2 <- p2 + ggtitle("Random data") + theme_bw(30)
ggMarginal(p2)
p3 <- ggplot(df2, aes(log(x), y - 500)) + geom_point()
ggMarginal(p3)
p4 <- p3 + scale_x_continuous(limits = c(2, 6)) + theme_bw(50)
ggMarginal(p4)
# Using groupColour and groupFill
# In order to use either of these arguments, we must map 'colour' in the
# scatter plot to a factor or character variable
p <- ggplot(mtcars, aes(x = wt, y = drat, colour = factor(vs))) +
geom_point()
ggMarginal(p, groupColour = TRUE)
ggMarginal(p, groupColour = TRUE, groupFill = TRUE)
getwd()
chr10DF <- read.table(
"docs/lm_test/p_chr_10.z_bmi0.gz",
sep = "\t",
header = T,
stringsAsFactors = F
)
View(chr10DF)
markerInfo10DF <- read.table(
file = "docs/lm_test/10-markerinfo",
header = F,
quote = "",
stringsAsFactors = F
)
names(markerInfo10DF) <- c("chrom", "pos", "variantId", "ref", "alt", "typed", "info", "refPanelAF")
chr10LogDF <- read.table(
"docs/lm_test/chr_10.variantLog.gz",
sep = "\t",
header = T,
stringsAsFactors = F
)
View(markerInfo10DF)
View(chr10LogDF)
chr10DF %>%
left_join(
markerInfo10DF,
by = "variantId"
) %>%
filter(
!is.na(info) & info > 0.7
) -> trioGen10DF
# Libraries
lib = NULL
library(scales, lib.loc = lib)
library(backports, lib = lib)
library(vctrs, lib = lib)
library(crayon, lib = lib)
library(tidyr, lib = lib)
library(dplyr, lib = lib)
library(gamlss.data, lib = lib)
library(gamlss.dist, lib = lib)
library(gamlss, lib = lib)
library(withr, lib.loc = lib)
library(labeling, lib.loc = lib)
library(digest, lib.loc = lib)
library(reshape2, lib.loc = lib)
library(ggplot2, lib.loc = lib)
library(grid, lib.loc = lib)
library(scico, lib.loc = lib)
library(gtable, lib.loc = lib)
library(conflicted, lib.loc = lib)
theme_set(theme_bw(base_size = 13))
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
chr10DF %>%
left_join(
markerInfo10DF,
by = "variantId"
) %>%
filter(
!is.na(info) & info > 0.7
) -> trioGen10DF
View(chr10DF)
View(trioGen10DF)
135534747 - max(trioGen10DF$pos)
(135534747 - max(trioGen10DF$pos))/135534747
names(trioGen10DF)
ggplot(
data = trioGen10DF
) +
geom_hline(
yintercept = -log10(5e-8),
col = "green4",
size = 0.3
) +
geom_point(
aes(x = pos,
y = -log10(cmf_h_p)
),
size = 2
) +
scale_y_continuous(
name = paste0(pColumn, " [-log10]"),
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_x_continuous(
name = "Chromosome",
limits = c(0, 135534747),
expand = expand_scale(
mult = 0.01
)
) +
theme(
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.3),
strip.background = element_rect(
fill = "grey99"
)
)
ggplot(
data = trioGen10DF
) +
geom_hline(
yintercept = -log10(5e-8),
col = "green4",
size = 0.3
) +
geom_point(
aes(x = pos,
y = -log10(cmf_h_p)
),
size = 2
) +
scale_y_continuous(
name = "p-value [-log10]",
expand = expand_scale(
mult = c(0, 0.05)
)
) +
scale_x_continuous(
name = "Chromosome",
limits = c(0, 135534747),
expand = expand_scale(
mult = 0.01
)
) +
theme(
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.3),
strip.background = element_rect(
fill = "grey99"
)
)
max(trioGen10DF$pos)
max(markerInfo10DF$pos)
135534747
max(markerInfo10DF$pos)/ 135534747
sum(chr10DF$variantId) %in% markerInfo10DF$variantId
sum(chr10DF$variantId %in% markerInfo10DF$variantId)/nrow(chr10DF)
distance <- 20E6
distance
hPvalueThreshold <- 0.05E-6
test <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6)
)
test[-1, ]
