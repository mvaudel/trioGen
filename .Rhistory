method = "lm",
col = "darkred",
fill = "darkred",
linetype = "dashed"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dotted"
)
ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "darkred",
fill = "darkred",
linetype = "dashed"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dotted"
)
ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dashed"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dotted"
)
ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
lmDF <- data.frame(
h = character(4),
pheno = character(4),
beta = numeric(4),
se = numeric(4),
stringsAsFactors = F
)
lmSummary$coefficients[2, 2]
lmSummary
lmSummary$coefficients[2, 2]
variant1DF <- trioDF %>%
filter(
variantI == 1
) %>%
select(
childId, h1, h2, h3, h4
)
lmDF <- data.frame(
h = character(4*4),
pheno = character(4*4),
beta = numeric(4*4),
se = numeric(4*4),
stringsAsFactors = F
)
for (i in 1:4) {
for (j in 1:4) {
hColumn <- paste0("h", i)
phenoColumn <- paste0("pheno", j)
noise = rnorm(
n = nrow(variant1DF),
mean = 0,
sd = 0.1
)
variant1DF[[phenoColumn]] <- variant1DF[[hColumn]] + noise
lmResults <- lm(
formula = as.formula(paste(phenoColumn, "~", hColumn)),
data = variant1DF
)
lmSummary <- summary(lmResults)
plot <- ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
png(
filename = paste0("src/main/resources/transmission/", hColumn, "_", phenoColumn, ".png"),
width = 800,
height = 600
)
plot(plot)
dummy <- dev.off()
lmDF$h[i*j] <- hColumn
lmDF$pheno[i*j] <- phenoColumn
lmDF$beta[i*j] <- lmSummary$coefficients[2, 1]
lmDF$se[i*j] <- lmSummary$coefficients[2, 2]
}
}
variant1DF <- trioDF %>%
filter(
variantI == 1
) %>%
select(
childId, h1, h2, h3, h4
)
lmDF <- data.frame(
h = character(4*4),
pheno = character(4*4),
beta = numeric(4*4),
se = numeric(4*4),
stringsAsFactors = F
)
for (i in 1:4) {
hColumn <- paste0("h", i)
noise = rnorm(
n = nrow(variant1DF),
mean = 0,
sd = 0.1
)
phenoColumn <- paste0("pheno", i)
variant1DF[[phenoColumn]] <- variant1DF[[hColumn]] + noise
}
for (i in 1:4) {
for (j in 1:4) {
hColumn <- paste0("h", i)
phenoColumn <- paste0("pheno", i)
lmResults <- lm(
formula = as.formula(paste(phenoColumn, "~", hColumn)),
data = variant1DF
)
lmSummary <- summary(lmResults)
plot <- ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
png(
filename = paste0("src/main/resources/transmission/", hColumn, "_", phenoColumn, ".png"),
width = 800,
height = 600
)
plot(plot)
dummy <- dev.off()
lmDF$h[i*j] <- hColumn
lmDF$pheno[i*j] <- phenoColumn
lmDF$beta[i*j] <- lmSummary$coefficients[2, 1]
lmDF$se[i*j] <- lmSummary$coefficients[2, 2]
}
}
for (i in 1:4) {
for (j in 1:4) {
hColumn <- paste0("h", i)
phenoColumn <- paste0("pheno", j)
lmResults <- lm(
formula = as.formula(paste(phenoColumn, "~", hColumn)),
data = variant1DF
)
lmSummary <- summary(lmResults)
plot <- ggplot(
data = variant1DF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
png(
filename = paste0("src/main/resources/transmission/", hColumn, "_", phenoColumn, ".png"),
width = 800,
height = 600
)
plot(plot)
dummy <- dev.off()
lmDF$h[i*j] <- hColumn
lmDF$pheno[i*j] <- phenoColumn
lmDF$beta[i*j] <- lmSummary$coefficients[2, 1]
lmDF$se[i*j] <- lmSummary$coefficients[2, 2]
}
}
phenoDF <- trioDF %>%
filter(
variantI == 1
) %>%
select(
childId, h1, h2, h3, h4
)
lmDF <- data.frame(
h = character(4*4),
pheno = character(4*4),
beta = numeric(4*4),
se = numeric(4*4),
stringsAsFactors = F
)
for (i in 1:4) {
hColumn <- paste0("h", i)
noise = rnorm(
n = nrow(phenoDF),
mean = 0,
sd = 0.1
)
phenoColumn <- paste0("pheno", i)
phenoDF[[phenoColumn]] <- phenoDF[[hColumn]] + noise
}
for (i in 1:4) {
for (j in 1:4) {
hColumn <- paste0("h", i)
phenoColumn <- paste0("pheno", j)
lmResults <- lm(
formula = as.formula(paste(phenoColumn, "~", hColumn)),
data = phenoDF
)
lmSummary <- summary(lmResults)
plot <- ggplot(
data = phenoDF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
png(
filename = paste0("src/main/resources/transmission/", hColumn, "_", phenoColumn, ".png"),
width = 800,
height = 600
)
plot(plot)
dummy <- dev.off()
lmDF$h[i*j] <- hColumn
lmDF$pheno[i*j] <- phenoColumn
lmDF$beta[i*j] <- lmSummary$coefficients[2, 1]
lmDF$se[i*j] <- lmSummary$coefficients[2, 2]
}
}
phenoDF <- phenoDF %>%
select(
childId, starts_with("pheno")
)
write.table(
x = phenoDF,
file = "src/main/resources/transmission/phenos_linear_model.txt",
row.names = F,
col.names = T,
quote = F
)
write.table(
x = phenoDF,
file = "src/main/resources/transmission/phenos_linear_model.txt",
row.names = F,
col.names = T,
quote = F,
sep = "\t"
)
write.table(
x = lmDF,
file = "src/main/resources/transmission/ground_truth_linear_model.txt",
row.names = F,
col.names = T,
quote = F,
sep = "\t"
)
lmDF <- data.frame(
h = character(4*4),
pheno = character(4*4),
beta = numeric(4*4),
se = numeric(4*4),
stringsAsFactors = F
)
for (i in 1:4) {
hColumn <- paste0("h", i)
noise = rnorm(
n = nrow(phenoDF),
mean = 0,
sd = 0.1
)
phenoColumn <- paste0("pheno", i)
phenoDF[[phenoColumn]] <- phenoDF[[hColumn]] + noise
}
phenoDF <- trioDF %>%
filter(
variantI == 1
) %>%
select(
childId, h1, h2, h3, h4
)
lmDF <- data.frame(
h = character(4*4),
pheno = character(4*4),
beta = numeric(4*4),
se = numeric(4*4),
stringsAsFactors = F
)
for (i in 1:4) {
hColumn <- paste0("h", i)
noise = rnorm(
n = nrow(phenoDF),
mean = 0,
sd = 0.1
)
phenoColumn <- paste0("pheno", i)
phenoDF[[phenoColumn]] <- phenoDF[[hColumn]] + noise
}
for (i in 1:4) {
for (j in 1:4) {
hColumn <- paste0("h", i)
phenoColumn <- paste0("pheno", j)
lmResults <- lm(
formula = as.formula(paste(phenoColumn, "~", hColumn)),
data = phenoDF
)
lmSummary <- summary(lmResults)
plot <- ggplot(
data = phenoDF
) +
geom_point(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
alpha = 0.2
) +
geom_smooth(
mapping = aes(
x = !!sym(hColumn),
y = !!sym(phenoColumn)
),
method = "lm",
col = "blue3",
fill = "blue3",
linetype = "dotted"
) +
geom_abline(
intercept = lmSummary$coefficients[1, 1],
slope = lmSummary$coefficients[2, 1],
col = "red",
linetype = "dashed"
)
png(
filename = paste0("src/main/resources/transmission/", hColumn, "_", phenoColumn, ".png"),
width = 800,
height = 600
)
plot(plot)
dummy <- dev.off()
k <- (i-1)*4 + j
lmDF$h[k] <- hColumn
lmDF$pheno[k] <- phenoColumn
lmDF$beta[k] <- lmSummary$coefficients[2, 1]
lmDF$se[k] <- lmSummary$coefficients[2, 2]
}
}
phenoDF <- phenoDF %>%
select(
childId, starts_with("pheno")
)
write.table(
x = phenoDF,
file = "src/main/resources/transmission/phenos_linear_model.txt",
row.names = F,
col.names = T,
quote = F,
sep = "\t"
)
write.table(
x = lmDF,
file = "src/main/resources/transmission/ground_truth_linear_model.txt",
row.names = F,
col.names = T,
quote = F,
sep = "\t"
)
source('C:/Github/trioGen/src/R/transmissionTestFiles.R')
View(lmDF)
lmSummary$coefficients
source('C:/Github/trioGen/src/R/transmissionTestFiles.R')
lmSummary
2^4
2^3
2^10
2^9
2^(6+4)
2^63
-2^63
10^(-2^63)
2^4
2^5
tinytex:::is_tinytex()
