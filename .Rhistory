xDensityGrob <- ggplotGrob(xDensityPlot)
yGrob <- ggplotGrob(yDensityPlot)
# Insert the densities as new row and column in the scatter grob
mergedGrob <- rbind(scatterGrob[1:6, ], xDensityGrob[7, ], scatterGrob[7:nrow(scatterGrob), ], size = "last")
mergedGrob$heights[7] <- unit(0.15, "null")
proteinDensityGrob <- gtable_add_rows(
x = proteinDensityGrob,
heights = unit(rep(0, nrow(mergedGrob) - nrow(yDensityGrob)), "null"),
pos = 0
)
mergedGrob <- cbind(mergedGrob[, 1:5], yDensityGrob[, 5], mergedGrob[, 6:ncol(mergedGrob)], size = "first")
mergedGrob$widths[6] <- unit(0.15, "null")
# Plot
return(mergedGrob)
}
phenoGrob <- getPlot(
valuesX = valuesX,
valuesY = valuesY,
labelX = "X",
labelY = "Y"
)
#' Builds a plot comparing two phenotypes.
#'
#' @param valuesX the values in x, must be numeric
#' @param valuesY the values in y, must be numeric
#' @param labelX the label for the x axis
#' @param labelY the label for the y axis
#' @param categories a vector to use to highlight categories, must be numeric
#' @param labelCat the label for the categories
#'
#' @return returns the plot as grob
getPlot <- function(
valuesX,
valuesY,
labelX,
labelY
) {
plotDF <- data.frame(
x = valuesX,
y = valuesY,
stringsAsFactors = F
) %>%
arrange(
rev(abs(y - x))
)
# Build the scatter plot
scatterPlot <- ggplot(
data = plotDF
) +
geom_point(
mapping = aes(
x = x,
y = y
),
col = "black",
alpha = 0.1
) +
geom_density_2d(
mapping = aes(
x = x,
y = y
),
col = "white",
) +
scale_x_continuous(
name = labelX
) +
scale_y_continuous(
name = labelY
) +
theme(
legend.position = "none"
)
# Build the density plots
xDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = x
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
)
yDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = y
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
) +
coord_flip()
# Make grobs from plots
scatterGrob <- ggplotGrob(scatterPlot)
xDensityGrob <- ggplotGrob(xDensityPlot)
yGrob <- ggplotGrob(yDensityPlot)
# Insert the densities as new row and column in the scatter grob
mergedGrob <- rbind(scatterGrob[1:6, ], xDensityGrob[7, ], scatterGrob[7:nrow(scatterGrob), ], size = "last")
mergedGrob$heights[7] <- unit(0.15, "null")
yGrob <- gtable_add_rows(
x = yGrob,
heights = unit(rep(0, nrow(mergedGrob) - nrow(yDensityGrob)), "null"),
pos = 0
)
mergedGrob <- cbind(mergedGrob[, 1:5], yDensityGrob[, 5], mergedGrob[, 6:ncol(mergedGrob)], size = "first")
mergedGrob$widths[6] <- unit(0.15, "null")
# Plot
return(mergedGrob)
}
phenoGrob <- getPlot(
valuesX = valuesX,
valuesY = valuesY,
labelX = "X",
labelY = "Y"
)
#' Builds a plot comparing two phenotypes.
#'
#' @param valuesX the values in x, must be numeric
#' @param valuesY the values in y, must be numeric
#' @param labelX the label for the x axis
#' @param labelY the label for the y axis
#' @param categories a vector to use to highlight categories, must be numeric
#' @param labelCat the label for the categories
#'
#' @return returns the plot as grob
getPlot <- function(
valuesX,
valuesY,
labelX,
labelY
) {
plotDF <- data.frame(
x = valuesX,
y = valuesY,
stringsAsFactors = F
) %>%
arrange(
rev(abs(y - x))
)
# Build the scatter plot
scatterPlot <- ggplot(
data = plotDF
) +
geom_point(
mapping = aes(
x = x,
y = y
),
col = "black",
alpha = 0.1
) +
geom_density_2d(
mapping = aes(
x = x,
y = y
),
col = "white",
) +
scale_x_continuous(
name = labelX
) +
scale_y_continuous(
name = labelY
) +
theme(
legend.position = "none"
)
# Build the density plots
xDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = x
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
)
yDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = y
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
) +
coord_flip()
# Make grobs from plots
scatterGrob <- ggplotGrob(scatterPlot)
xDensityGrob <- ggplotGrob(xDensityPlot)
yDensityGrob <- ggplotGrob(yDensityPlot)
# Insert the densities as new row and column in the scatter grob
mergedGrob <- rbind(scatterGrob[1:6, ], xDensityGrob[7, ], scatterGrob[7:nrow(scatterGrob), ], size = "last")
mergedGrob$heights[7] <- unit(0.15, "null")
yGrob <- gtable_add_rows(
x = yGrob,
heights = unit(rep(0, nrow(mergedGrob) - nrow(yDensityGrob)), "null"),
pos = 0
)
mergedGrob <- cbind(mergedGrob[, 1:5], yDensityGrob[, 5], mergedGrob[, 6:ncol(mergedGrob)], size = "first")
mergedGrob$widths[6] <- unit(0.15, "null")
# Plot
return(mergedGrob)
}
phenoGrob <- getPlot(
valuesX = valuesX,
valuesY = valuesY,
labelX = "X",
labelY = "Y"
)
#' Builds a plot comparing two phenotypes.
#'
#' @param valuesX the values in x, must be numeric
#' @param valuesY the values in y, must be numeric
#' @param labelX the label for the x axis
#' @param labelY the label for the y axis
#' @param categories a vector to use to highlight categories, must be numeric
#' @param labelCat the label for the categories
#'
#' @return returns the plot as grob
getPlot <- function(
valuesX,
valuesY,
labelX,
labelY
) {
plotDF <- data.frame(
x = valuesX,
y = valuesY,
stringsAsFactors = F
) %>%
arrange(
rev(abs(y - x))
)
# Build the scatter plot
scatterPlot <- ggplot(
data = plotDF
) +
geom_point(
mapping = aes(
x = x,
y = y
),
col = "black",
alpha = 0.1
) +
geom_density_2d(
mapping = aes(
x = x,
y = y
),
col = "white",
) +
scale_x_continuous(
name = labelX
) +
scale_y_continuous(
name = labelY
) +
theme(
legend.position = "none"
)
# Build the density plots
xDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = x
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
)
yDensityPlot <- ggplot(
data = plotDF
) + theme_minimal() +
geom_density(
mapping = aes(
x = y
),
fill = "black",
alpha = 0.1
) +
scale_x_continuous(
expand = c(0, 0)
) +
scale_y_continuous(
expand = c(0, 0)
) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank()
) +
coord_flip()
# Make grobs from plots
scatterGrob <- ggplotGrob(scatterPlot)
xDensityGrob <- ggplotGrob(xDensityPlot)
yDensityGrob <- ggplotGrob(yDensityPlot)
# Insert the densities as new row and column in the scatter grob
mergedGrob <- rbind(scatterGrob[1:6, ], xDensityGrob[7, ], scatterGrob[7:nrow(scatterGrob), ], size = "last")
mergedGrob$heights[7] <- unit(0.15, "null")
yDensityGrob <- gtable_add_rows(
x = yDensityGrob,
heights = unit(rep(0, nrow(mergedGrob) - nrow(yDensityGrob)), "null"),
pos = 0
)
mergedGrob <- cbind(mergedGrob[, 1:5], yDensityGrob[, 5], mergedGrob[, 6:ncol(mergedGrob)], size = "first")
mergedGrob$widths[6] <- unit(0.15, "null")
# Plot
return(mergedGrob)
}
phenoGrob <- getPlot(
valuesX = valuesX,
valuesY = valuesY,
labelX = "X",
labelY = "Y"
)
grid.newpage()
library(grid)
grid.newpage()
grid.draw(phenoGrob)
?gamlss
triogenDF <- read.table(
file = "C:\Github\trioGen\docs\lm_test\chr_7.gz",
sep = "\t",
header = T
)
triogenDF <- read.table(
file = "C:\\Github\\trioGen\\docs\\lm_test\\chr_7.gz",
sep = "\t",
header = T,
quote = ""
)
# Libraries
library(tidyr)
library(dplyr)
library(ggplot2)
theme_set(theme_bw(base_size = 11))
# Parameters
set.seed(03102019)
separators <- c("/", "|")
possibleGenotypes <- list()
for (i in 1:length(separators)) {
separator <- separators[i]
alleleCombinations <- c()
for (allele1 in 0:1) {
for (allele2 in 0:1) {
genotype <- paste0(allele1, separator, allele2)
alleleCombinations[length(alleleCombinations) + 1] <- genotype
}
}
possibleGenotypes[[i]] <- alleleCombinations
}
# Function
getGenotypeCode <- function(genotype) {
allele1 <- substr(genotype, 1, 1)
allele2 <- substr(genotype, 3, 3)
return(
ifelse(
allele1 == "0" & allele2 == "0",
0,
ifelse(
allele1 == "0" & allele2 == "1" | allele1 == "1" & allele2 == "0",
1,
2
)
)
)
}
getAlleleCode <- function(genotype) {
allele1 <- substr(genotype, 1, 1)
allele2 <- substr(genotype, 3, 3)
return(
ifelse(
allele1 == "0" & allele2 == "0",
0,
ifelse(
allele1 == "0" & allele2 == "1",
1,
ifelse(
allele1 == "1" & allele2 == "0",
2,
3
)
)
)
)
}
View(possibleGenotypes)
print("Iterating allele combinations")
trioDFs <- list()
for (variantI in 1:100) {
variantId <- paste0("rs", variantI)
separator <- sample(
x = separators,
size = 1
)
separatorI <- (variantI %% length(separators)) + 1
childGenotypes <- possibleGenotypes[[separatorI]]
childGenotypes <- sample(childGenotypes, length(childGenotypes))
separatorI <- ((variantI + 1) %% length(separators)) + 1
motherGenotypes <- possibleGenotypes[[separatorI]]
motherGenotypes <- sample(motherGenotypes, length(motherGenotypes))
separatorI <- ((variantI + 2) %% length(separators)) + 1
fatherGenotypes <- possibleGenotypes[[separatorI]]
fatherGenotypes <- sample(fatherGenotypes, length(fatherGenotypes))
triadI <- 1
for (rep in 1:10) {
for (childGenotype in childGenotypes) {
for (motherGenotype in motherGenotypes) {
for (fatherGenotype in fatherGenotypes) {
newLine <- data.frame(
variantI = variantI,
triadI = triadI,
variant = variantId,
childId = paste0("CHILD", triadI),
motherId = paste0("MOTHER", triadI),
fatherId = paste0("FATHER", triadI),
childGenotype = childGenotype,
motherGenotype = motherGenotype,
fatherGenotype = fatherGenotype,
stringsAsFactors = F
)
trioDFs[[length(trioDFs) + 1]] <- newLine
triadI <- triadI + 1
}
}
}
}
if (variantI %% 10 == 0) {
print(paste(variantI, "/ 100"))
}
}
trioDF <- do.call("rbind", trioDFs)
View(trioDF)
# Ground truth results for extraction
print("Computing h")
trioDF %>%
arrange(
variantI,
triadI
) %>%
mutate(
motherGenotypeCode = getGenotypeCode(motherGenotype),
fatherGenotypeCode = getGenotypeCode(fatherGenotype),
childAlleleCode = getAlleleCode(childGenotype),
h1 = ifelse(childAlleleCode == 0 | childAlleleCode == 2, 0, 1),
h2 = motherGenotypeCode - h1,
h3 = ifelse(childAlleleCode < 2, 0, 1),
h4 = fatherGenotypeCode - h3
) -> trioDF
