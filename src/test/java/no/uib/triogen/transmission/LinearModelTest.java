package no.uib.triogen.transmission;

import java.io.File;
import java.util.HashMap;
import java.util.Map.Entry;
import junit.framework.Assert;
import junit.framework.TestCase;
import no.uib.triogen.cmd.association.LinearModel;
import no.uib.triogen.io.Utils;
import no.uib.triogen.io.flat.SimpleFileReader;
import no.uib.triogen.io.genotypes.GenotypesFileType;

/**
 * This file runs the transmission command on test files and compares the
 * results of the transmission command with ground truth results. Test files are
 * generated by src/R/transmissionTestFiles.R
 *
 * @author Marc Vaudel
 */
public class LinearModelTest extends TestCase {
    
    /**
     * Tolerance used to compare summary statistics.
     */
    public static final double tolerance = 1e-9;

    /**
     * Runs the command line and checks the output.
     */
    public void testTransmission() {

        String resultsFilePath = "src/test/resources/transmission/test_lm.gz";
        File resultsFile = new File(resultsFilePath);
        
        if (resultsFile.exists()) {
            
            resultsFile.delete();
            
        }

        HashMap<String, HashMap<String, double[]>> groundTruthMap = getGroundTruth(
                new File("src/test/resources/transmission/ground_truth_linear_model.txt")
        );

        String[] args = new String[]{
            "-g", "src/test/resources/transmission/test_transmission.vcf",
            "-gf", Integer.toString(GenotypesFileType.sangerVCF.index),
            "-p", "src/test/resources/transmission/phenos_linear_model.txt",
            "-pn", "pheno1,pheno2,pheno3,pheno4",
            "-f", "src/test/resources/transmission/test_trio",
            "-o", resultsFilePath
        };
        LinearModel.main(
                args
        );

        HashMap<String, HashMap<String, double[]>> resultsMap = getResults(
                resultsFile,
                "rs1"
        );

        for (Entry<String, HashMap<String, double[]>> entry1 : groundTruthMap.entrySet()) {

            String pheno = entry1.getKey();
            HashMap<String, double[]> hMapGroundTruth = entry1.getValue();
            HashMap<String, double[]> hMapData = resultsMap.get(pheno);

            if (hMapData == null) {

                throw new IllegalArgumentException(
                        "Phenotype " + pheno + " not found in the results."
                );
            }

            for (Entry<String, double[]> entry2 : hMapGroundTruth.entrySet()) {

                String h = entry2.getKey();
                double[] statsGroundTruth = entry2.getValue();
                double[] statsData = hMapData.get(h);

                if (statsData == null) {

                    throw new IllegalArgumentException(
                            "h " + h + " for phenotype " + pheno + " not found in the results."
                    );
                }

                for (int i = 0; i < statsGroundTruth.length; i++) {

                    if (statsGroundTruth[i] == 0.0) {

                        Assert.assertTrue(Math.abs(statsData[i]) < tolerance);

                    } else {

                        double error = statsData[i] - statsGroundTruth[i];

                        Assert.assertTrue(Math.abs(error) < tolerance);

                    }
                }
            }
        }
    }

    /**
     * Parses the results for the given snp into a map: pheno to h to beta and
     * se.
     *
     * @param resultFile the result file
     * @param rsId the id of the snp to parse
     *
     * @return the ground truth results
     */
    private HashMap<String, HashMap<String, double[]>> getResults(
            File resultFile,
            String rsId
    ) {

        HashMap<String, HashMap<String, double[]>> result = new HashMap<>();

        SimpleFileReader reader = SimpleFileReader.getFileReader(resultFile);

        String line = reader.readLine();

        String[] lineSplit = line.split(Utils.separator);
        Assert.assertTrue(lineSplit[0].equals("phenotype"));
        Assert.assertTrue(lineSplit[1].equals("variantID"));
        Assert.assertTrue(lineSplit[2].equals("h"));
        Assert.assertTrue(lineSplit[3].equals("beta"));
        Assert.assertTrue(lineSplit[4].equals("betaSE"));

        while ((line = reader.readLine()) != null) {

            lineSplit = line.split(Utils.separator);

            String variantId = lineSplit[1];

            if (variantId.equals(rsId)) {

                String pheno = lineSplit[0];
                String h = lineSplit[2];
                double beta = Double.parseDouble(lineSplit[3]);
                double se = Double.parseDouble(lineSplit[4]);

                HashMap<String, double[]> phenoMap = result.get(pheno);

                if (phenoMap == null) {

                    phenoMap = new HashMap<>(4);
                    result.put(pheno, phenoMap);

                }

                double[] stats = new double[]{beta, se};
                phenoMap.put(h, stats);

            }

        }

        return result;

    }

    /**
     * Parses the ground truth results into a map: pheno to h to beta and se.
     *
     * @param resultFile the result file
     *
     * @return the ground truth results
     */
    private HashMap<String, HashMap<String, double[]>> getGroundTruth(
            File resultFile
    ) {

        HashMap<String, HashMap<String, double[]>> result = new HashMap<>();

        SimpleFileReader reader = SimpleFileReader.getFileReader(resultFile);

        String line = reader.readLine();

        String[] lineSplit = line.split(Utils.separator);
        Assert.assertTrue(lineSplit[0].equals("h"));
        Assert.assertTrue(lineSplit[1].equals("pheno"));
        Assert.assertTrue(lineSplit[2].equals("beta"));
        Assert.assertTrue(lineSplit[3].equals("se"));

        while ((line = reader.readLine()) != null) {

            lineSplit = line.split(Utils.separator);

            String h = lineSplit[0];
            String pheno = lineSplit[1];
            double beta = Double.parseDouble(lineSplit[2]);
            double se = Double.parseDouble(lineSplit[3]);

            HashMap<String, double[]> phenoMap = result.get(pheno);

            if (phenoMap == null) {

                phenoMap = new HashMap<>(4);
                result.put(pheno, phenoMap);

            }

            double[] stats = new double[]{beta, se};
            phenoMap.put(h, stats);

        }

        return result;

    }
}
