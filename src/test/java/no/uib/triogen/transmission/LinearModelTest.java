package no.uib.triogen.transmission;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map.Entry;
import junit.framework.Assert;
import junit.framework.TestCase;
import no.uib.triogen.cmd.association.LinearModel;
import no.uib.triogen.cmd.results.Extract;
import no.uib.triogen.io.IoUtils;
import static no.uib.triogen.io.IoUtils.getIndexFile;
import no.uib.triogen.io.flat.SimpleFileReader;
import no.uib.triogen.io.flat.SimpleFileWriter;
import no.uib.triogen.io.flat.indexed.IndexedGzReader;
import no.uib.triogen.io.flat.indexed.IndexedGzWriter;
import no.uib.triogen.io.genotypes.GenotypesFileType;

/**
 * This file runs the transmission command on test files and compares the
 * results of the transmission command with ground truth results. Test files are
 * generated by src/R/transmissionTestFiles.R
 *
 * @author Marc Vaudel
 */
public class LinearModelTest extends TestCase {

    /**
     * Tolerance used to compare summary statistics.
     */
    public static final double tolerance = 1e-9;

    /**
     * Runs the command line and checks the output.
     *
     * @throws java.io.IOException Exception thrown if an I/O error occurs.
     */
    public void testTransmission() throws IOException {

        String resultsFilePath = "src/test/resources/transmission/test_lm.gz";
        File resultsFile = new File(resultsFilePath);

        if (resultsFile.exists()) {

            resultsFile.delete();

        }

        String[] args = new String[]{
            "-g", "src/test/resources/transmission/test_transmission.vcf",
            "-gf", Integer.toString(GenotypesFileType.sangerVCF.index),
            "-p", "src/test/resources/transmission/phenos_linear_model.txt",
            "-pn", "pheno1,pheno2,pheno3,pheno4",
            "-f", "src/test/resources/transmission/test_trio",
            "-o", resultsFilePath
        };
        LinearModel.main(
                args
        );

        File indexFile = getIndexFile(resultsFile);
        long position = IndexedGzWriter.HEADER_LENGTH;
        try (IndexedGzReader gzReader = new IndexedGzReader(resultsFile)) {

            try (SimpleFileReader reader = SimpleFileReader.getFileReader(indexFile)) {

                String line = reader.readLine();

                while ((line = reader.readLine()) != null) {

                    String[] lineSplit = line.split(IoUtils.SEPARATOR);
                    int compressedLength = Integer.parseInt(lineSplit[2]);
                    int uncompressedLength = Integer.parseInt(lineSplit[3]);

                    String uncompressedLine = gzReader.read(position, compressedLength, uncompressedLength);

                    position += compressedLength;

                }
            }
        }

        testExtraction(resultsFilePath);

    }

    private void testExtraction(String resultsFilePath) {

        String[] args = new String[]{
            "-i", resultsFilePath,
            "-p", "pheno1,pheno2",
            "-sp",
            "-col", "h_B1,h_B1_se,h_B1_p,h_B2,h_B2_se,h_B2_p,h_B3,h_B3_se,h_B3_p,h_B4,h_B4_se,h_B4_p",
            "-pn", "pheno1,pheno2,pheno3,pheno4",
            "-o", resultsFilePath + "_extract"
        };
        Extract.main(
                args
        );

    }
}
